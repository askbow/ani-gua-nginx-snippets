# This is an nginx config snippet for a nice TLS setup
# Source:
#       https://mozilla.github.io/server-side-tls/ssl-config-generator/
#       NOTE: consult with this source before using this snippet, 
#             as they update it on a regular basis
#       https://habrahabr.ru/post/252821/
# Usage:
# 
# server {
#	listen 443 ssl http2;
#   listen [::]:443 ssl http2;
#	server_name example.com;
#       
#       include sites-enabled/tls.setup # this file
#
#       # provide certificate chain and key:
#       ssl_certificate /path/to/ssl/serts/example.crt;
#       ssl_certificate_key /path/to/ssl/serts/example.key;
#       # NOTE: consider using let's encrypt for free-of-charge certificates
#   <...> # other statements
# } # end of SERVER statement
#
# # END of usage example


	resolver trusted.dns.server.example.com; # set locally-reachable resolver
                                             # better use an IP address
											 
	ssl on; # this is not really needed, as 'ssl' now is enabled in the listen directive
	
# Make your own dhparam file!
# To generate your very own dhparam.pem file, run in the terminal:
# > openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
# 2048 can be replaced with 4096 if paranoid AND have CPU cycles to burn
# WARNING! using 1024 and below is insecure!
# WARNING! the higher, the more load on your server for each connection, 
#          there's a direct tradeoff between security and performance.
	ssl_dhparam /etc/nginx/ssl/dhparam.pem; 
	
	
	ssl_session_timeout 25m;
	ssl_session_cache shared:SSL:2m;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
	ssl_prefer_server_ciphers on;

        # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
	add_header Strict-Transport-Security "max-age=15768000;"; 

        # OCSP Stapling ---
        # fetch OCSP records from URL in ssl_certificate and cache them
        ssl_stapling on;

# NOTE: for some reason I wasn't able to make this part work correctly yet,
#       so it is commented-out.
        #ssl_stapling_verify on;
        ## verify chain of trust of OCSP response using Root CA and Intermediate certs
        #ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
add_header Content-Security-Policy-Report-Only "default-src https:; script-src https: 'unsafe-eval' 'unsafe-inline'; style-src https: 'unsafe-inline'; img-src https: data:; font-src https: data:; report-uri /csp-report";
# WARNING: this one might break stuff, you MUST test it and consider adding domains of cdns 
#          that host external scripts for you;
#          like, apis.google.com, fonts.google.com, or whatever:
#          script-src https://apis.google.com https://platform.twitter.com; child-src https://plusone.google.com https://facebook.com https://platform.twitter.com
#
#